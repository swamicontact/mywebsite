name: CICD
on:
  push:
    branches:
      - main # or the name of your main branch

jobs:
  CICD:
    name: CICD
    runs-on: windows-latest
    steps:
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Cache SonarQube packages
        uses: actions/cache@v1
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarQube scanner
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarQube scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"mywebsite" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}"
          dotnet build 'mywebsite.sln'
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
          
     #Add msbuild to PATH
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.0.2
  
     #To build dotnet application using MSBuild
      - name: Build
        run: msbuild ./mywebsite.sln
        
     #To Packackage dotnet Application
      - name: Package Nuget Package
        run: |
          dotnet pack .\mywebsite --configuration Release
          
    #To Add nuget artifacts repository as source to push artifacts.
      - name: AddSource
        run: |
          dotnet nuget add source ${{ secrets.NEXUS_URL_NUGET }} --name "nexus" --username  ${{ secrets.NEXUS_USER_NAME }} --password ${{ secrets.NEXUS_PASSWORD }}
          dotnet nuget add source "https://nuget.pkg.github.com/tamilselvansellamuthu/index.json" -n "github" 

    #To Push nuget package to artifacts repository using GitHub Secrets.
      - name: Push Nuget Package
        run: |         
          dotnet nuget push "D:\a\mywebsite\mywebsite\mywebsite\bin\Release\mywebsite.1.0.0.nupkg"  --api-key ${{ secrets.NEXUS_API_KEY }} --source "nexus"
          dotnet nuget push "D:\a\mywebsite\mywebsite\mywebsite\bin\Release\mywebsite*.nupkg"  --api-key ${{ secrets.TOKEN_GITHUB }} --source "github" --skip-duplicate

#          dotnet nuget list --source "github"
#          dotnet nuget delete mywebsite 1.0.0 --source "github"
#          dotnet nuget list --source "github"

    #To Test Using NUnit.
      - name: Nunit Testing
        run: dotnet test
          
    #To Publish dotnet application
      - name: Publish
        run: dotnet publish --configuration release
        
    #To Push Artifacts to Nexus.
      - name: PushToNexus
        run: |
          $ArtifactName = "mywebsite"
          $timestamp = Get-Date -Format "yyyy-MM-dd-HH-mm-ss"
          $runnumber = $env:GITHUB_RUN_NUMBER
          $NexusArtifactName = "$ArtifactName-$runnumber"
          Compress-Archive D:\a\mywebsite\mywebsite\mywebsite\bin\Release\netcoreapp3.1\publish\* .\$NexusArtifactName
          $NexusPassword = ConvertTo-SecureString "${{ secrets.NEXUS_PASSWORD }}" -AsPlainText -Force
          $NexusCred = New-Object System.Management.Automation.PSCredential ( "${{ secrets.NEXUS_USER_NAME }}" , $NexusPassword)
          $ArtifactSourceFile = "D:\a\mywebsite\mywebsite\$NexusArtifactName.zip"
          $ArtifactDestinationUri = "${{ secrets.NEXUS_RAW_REPO_URL }}/$NexusArtifactName.zip"
          Invoke-WebRequest -uri $ArtifactDestinationUri -Method Put -Infile $ArtifactSourceFile -Credential $NexusCred -AllowUnencryptedAuthentication
          $ArtifactDestinationUriLatest = "${{ secrets.NEXUS_RAW_REPO_URL }}/$ArtifactName-latest.zip"
          Invoke-WebRequest -uri $ArtifactDestinationUriLatest -Method Put -Infile $ArtifactSourceFile -Credential $NexusCred -AllowUnencryptedAuthentication
          
    #To Push Artifacts to Git repository.
      - uses: actions/upload-artifact@v2
        with:
          name: mywebsite.zip
          path: .\*.zip
          
    #To Push Artifacts to IIS.
      - name: winrm
        run: |
          Set-Item wsman:\localhost\Client\TrustedHosts ${{ secrets.WINRM_HOST }} -Concatenate -Force
          $WinRMPassword = ConvertTo-SecureString "${{ secrets.WINRM_PASSWORD }}" -AsPlainText -Force
          $WinRMCredential = New-Object System.Management.Automation.PSCredential ( "${{ secrets.WINRM_USERNAME }}" , $WinRMPassword)
          Enter-PSSession -ComputerName ${{ secrets.WINRM_HOST }} -Credential $WinRMCredential
          Invoke-Command -ComputerName ${{ secrets.WINRM_HOST }} -ScriptBlock { cd c:\inetpub\wwwroot\mywebsite\; net stop W3SVC; Remove-Item C:\inetpub\wwwroot\mywebsite\* -Recurse -Force -Confirm:$false; net start W3SVC; $NexusPassword = ConvertTo-SecureString "${{ secrets.NEXUS_PASSWORD }}" -AsPlainText -Force; $NexusCred = New-Object System.Management.Automation.PSCredential ( "${{ secrets.NEXUS_USER_NAME }}" , $NexusPassword); $NexusArtifactUri = "${{ secrets.NEXUS_RAW_REPO_URL }}/mywebsite-latest.zip"; Invoke-WebRequest -uri $NexusArtifactUri -o mywebsite-latest.zip -Credential $NexusCred; Expand-Archive c:\inetpub\wwwroot\mywebsite\mywebsite-latest.zip c:\inetpub\wwwroot\mywebsite\; Exit-PSSession } -credential $WinRMCredential
